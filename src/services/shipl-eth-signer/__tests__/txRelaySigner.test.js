const TxRelaySigner = require('../txRelaySigner.js')
const ethUtils = require('ethereumjs-util')
const txutils = require('../txutils')

jest.mock('solidity-sha3', () => ({
  default: jest.fn((hashInput) => {
    return hashInput
  })
}))

const testKeyPair = {
  address: '0x123',
  privateKey: '0x3434'
}

const testTxRelayAddress = 'x0fefe'
const testTxSenderAddress = '0x3654'
const testWhitelistOwner = '0x8787'

let txRelaySigner

const validMetaSignedTx = 'f9022b808504a817c800832dc6c094da8c6dce9e9a85e6f9df7b09b2354da44cb4833180b90204c3f44c0a000000000000000000000000000000000000000000000000000000000000001bacb3c0b5f7da08a03f3553d0ff4de37c549e5d5a21f2c30cea6286925d6cc0832d2046d92c4284ec3b343bf90f5c1ec17ef5574ee6e604d77cd5b32a02fe76a800000000000000000000000087ea811785c4bd30fc104c2543cf8ed90f7eeec700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104701b8826000000000000000000000000e4c7b7aba88156a3caf4c7bdaf5d3cbd6229081b000000000000000000000000c0d9155d09478b7be33140f0dcfca608ad347c3f00000000000000000000000071845bbfe5ddfdb919e780febfff5eda62a30fdc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024b6608467000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c8080'
const rawTx = '0xf9012a818e843b9aca0082a3479487ea811785c4bd30fc104c2543cf8ed90f7eeec780b90104701b88260000000000000000000000006e902c319d28c618a139f1f1dddd9452f9dbb49a0000000000000000000000009e0272e98a3586ccac04daf806c7ee79303db3ea000000000000000000000000abc59d9a5163d5ab600cccd9108bf532d8d9d7a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f207564e000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000001c8080'
const signFunction = undefined

const exampleSignedMetaTx = 'f9022980843b9aca0082a34794da8c6dce9e9a85e6f9df7b09b2354da44cb4833180b90204c3f44c0a000000000000000000000000000000000000000000000000000000000000001ca1b5bbecb96aec061fa6f5f38fa5fcc493b74969547af8b7769ed20bb6c4374f4c33d32c3dfbc3c3b777afb38809525a208b6b38dfa3f1e172b55bc5fafce8ad00000000000000000000000087ea811785c4bd30fc104c2543cf8ed90f7eeec700000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104701b88260000000000000000000000006e902c319d28c618a139f1f1dddd9452f9dbb49a0000000000000000000000009e0272e98a3586ccac04daf806c7ee79303db3ea000000000000000000000000abc59d9a5163d5ab600cccd9108bf532d8d9d7a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f207564e000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c8080'
const exampleDecodedMetaTx = JSON.parse('{"v":28,"r":{"type":"Buffer","data":[161,181,187,236,185,106,236,6,31,166,245,243,143,165,252,196,147,183,73,105,84,122,248,183,118,158,210,11,182,196,55,79]},"s":{"type":"Buffer","data":[76,51,211,44,61,251,195,195,183,119,175,179,136,9,82,90,32,139,107,56,223,163,241,225,114,181,91,197,250,252,232,173]},"to":"87EA811785C4bD30FC104C2543Cf8ED90f7eeec7","data":"701b88260000000000000000000000006e902c319d28c618a139f1f1dddd9452f9dbb49a0000000000000000000000009e0272e98a3586ccac04daf806c7ee79303db3ea000000000000000000000000abc59d9a5163d5ab600cccd9108bf532d8d9d7a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f207564e000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000","whitelistOwner":"0000000000000000000000000000000000000000","claimedAddress":"0x6e902c319d28c618a139f1f1dddd9452f9dbb49a"}')

beforeEach(() => {
  txRelaySigner = new TxRelaySigner(testKeyPair,
    testTxRelayAddress,
    testTxSenderAddress,
    testWhitelistOwner)
})

describe('TxRelaySigner', () => {
  test('constructor', (done) => {
    expect(txRelaySigner.keypair).toBe(testKeyPair)
    expect(txRelaySigner.txRelayAddress).toBe(testTxRelayAddress)
    expect(txRelaySigner.txSenderAddress).toBe(testTxSenderAddress)
    expect(txRelaySigner.whitelistOwner).toBe(testWhitelistOwner)
    done()
  })

  test('getAddress', () => {
    expect(txRelaySigner.getAddress()).toBe(testKeyPair.address)
  })

  test('signMsgHash', () => {
    const testMessage = '0x456'
    ethUtils.ecsign = jest.fn((msg) => {
      return testMessage
    })
    const signedMessage = txRelaySigner.signMsgHash(testMessage)

    const expectedArg1 = Buffer.from(ethUtils.stripHexPrefix(testMessage), 'hex')
    const expectedArg2 = Buffer.from(ethUtils.stripHexPrefix(testKeyPair.privateKey), 'hex')

    expect(signedMessage).not.toBeUndefined()
    expect(signedMessage).toBe(testMessage)
    expect(ethUtils.ecsign).toBeCalledWith(expectedArg1, expectedArg2)
    ethUtils.ecsign.mockRestore()
  })

  test('Decode MetaTx', () => {
    const res = txRelaySigner.decodeMetaTx(exampleSignedMetaTx)
    expect(JSON.stringify(res)).toEqual(JSON.stringify(exampleDecodedMetaTx))
  })

  describe('isMetaSignatureValid', () => {
    test('No nonce', (done) => {
      try {
        txRelaySigner.isMetaSignatureValid(validMetaSignedTx, 'network')
      } catch (error) {
        expect(error.message).toBe('nonce must be a string')
        done()
      }
    })

    test('Valid', () => {
      let result = null
      ethUtils.ecrecover = jest.fn()
      ethUtils.pubToAddress = jest.fn(() => {
        return testKeyPair.address
      })
      result = txRelaySigner.isMetaSignatureValid(validMetaSignedTx, {claimedAddress: testKeyPair.address}, '8')

      expect(result).not.toBeNull()
      expect(1).toBe(1)
      ethUtils.ecrecover.mockRestore()
      ethUtils.pubToAddress.mockRestore()
    })
  })

  describe('signRawTx', () => {
    test('happy', async (done) => {
      ethUtils.ecsign = jest.fn((msg) => {
        return {
          v: 'test-v',
          r: 'test-r',
          s: 'test-s'
        }
      })
      txutils.functionTx = jest.fn(() => {
        return 'rawMetaSignedTx'
      })
      const signedRawTx = await txRelaySigner.signRawTx(rawTx)
      expect(signedRawTx).toBe('rawMetaSignedTx')
      done()
    })
  })
})
